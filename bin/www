const app = require("../server");
const http = require("http");
const debug = require("debug")("d-cubed-lawncare:*");
const server = http.createServer(app);
const sequelize = require("../config/connection");
const seedUsers = require("../seeds/user-seeds");

//normalize port into a number, string, or false
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) return val;

  if (port >= 0) return port;

  return false;
};

// server error event listener
const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  //handle specific listen errors
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  debug("Listening on " + bind);
};

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

// Attempt to connect to db, console error if it can't
try {
  sequelize.authenticate();
  console.log("Connection has been established successfully.");
} catch (error) {
  console.error("Unable to connect to the database:", error);
}
// turn on connection to db and server
sequelize.sync({ force: false }).then(() => {
  server.listen(port);
});

server.on("error", onError);
server.on("listening", onListening);
